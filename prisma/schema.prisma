// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Base {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tables    Table[]
  views     View[]
  createdAt DateTime @default(now())

  @@index([userId, id])

}

model Table {
  id        String   @id @default(cuid())
  name      String
  baseId    String
  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns   Column[]
  rows      Row[]
  views     View[]
  createdAt DateTime @default(now())

  @@index([baseId])
}

model Column {
  id        String   @id @default(cuid())
  name      String
  type      ColumnType
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]
  createdAt DateTime @default(now())

  @@index([tableId])
}

enum ColumnType {
  TEXT
  NUMBER
}

model Row {
  id        String   @id @default(cuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]
  createdAt DateTime @default(now())

  @@index([tableId])
}

model Cell {
  id        String   @id @default(cuid())
  rowId     String
  columnId  String
  value     String   // Store all as string and cast on frontend
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@index([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
}

model View {
  id        String   @id @default(cuid())
  name      String
  tableId   String?  // Optional for base-level views
  baseId    String?  // Optional for table-specific views
  table     Table?   @relation(fields: [tableId], references: [id], onDelete: Cascade)
  base      Base?    @relation(fields: [baseId], references: [id], onDelete: Cascade)
  filters   Json     // store filter config as JSON
  sort      Json     // store sort config as JSON
  hiddenColumns Json // column ids hidden
  createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

